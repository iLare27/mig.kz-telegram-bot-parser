import { Bot, InlineKeyboard } from "grammy";
import { MyContext } from "../types/index.js";
import { UserService } from "../services/userService.js";
import { CurrencyService } from "../services/currencyService.js";
import { NotificationService } from "../services/notificationService.js";

export function setupCommands(bot: Bot<MyContext>): void {
  // –ö–æ–º–∞–Ω–¥–∞ /start
  bot.command("start", async (ctx) => {
    try {
      const telegramId = ctx.from?.id;
      if (!telegramId) return;

      const user = await UserService.registerUser(telegramId, ctx.from?.language_code);
      
      const welcomeMessage = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞ –∏ –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/rate - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/notify_on - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/notify_off - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/my_settings - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /rate –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞!`;

      await ctx.reply(welcomeMessage);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /rate
  bot.command("rate", async (ctx) => {
    try {
      const telegramId = ctx.from?.id;
      if (!telegramId) return;

      const user = await UserService.getUserByTelegramId(telegramId);
      if (!user) {
        await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        return;
      }

      const settings = await UserService.getUserSettings(user.id);
      if (!settings) {
        await ctx.reply("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
      const currentRate = await CurrencyService.getLatestRate(settings.source, settings.currency);
      
      if (!currentRate) {
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞
      const change = await CurrencyService.calculateRateChange(settings.source, settings.currency);
      const direction = change > 0 ? "üìà" : change < 0 ? "üìâ" : "‚û°Ô∏è";
      const changeText = change !== 0 ? `${direction} ${Math.abs(change).toFixed(2)}%` : "–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π";

      const message = `üí± –ö—É—Ä—Å ${settings.currency}

    –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: ${Number(currentRate.value).toFixed(2)} ${settings.currency}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞: ${changeText}
–ò—Å—Ç–æ—á–Ω–∏–∫: ${settings.source}
–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${currentRate.timestamp.toLocaleString("ru-RU")}`;

      await ctx.reply(message);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ rate:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /settings
  bot.command("settings", async (ctx) => {
    try {
      const telegramId = ctx.from?.id;
      if (!telegramId) return;

      const user = await UserService.getUserByTelegramId(telegramId);
      if (!user) {
        await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        return;
      }

      const settings = await UserService.getUserSettings(user.id);
      if (!settings) {
        await ctx.reply("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        return;
      }

      const keyboard = new InlineKeyboard()
        .text("üí± –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É", "settings_currency")
        .text("üåê –ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "settings_source").row()
        .text("üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥", "settings_threshold")
        .text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "settings_notifications").row()
        .text("üìã –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "my_settings");

      const message = `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –í–∞–ª—é—Ç–∞: ${settings.currency}
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: ${settings.source}
‚Ä¢ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${settings.thresholdPercent}%
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.notifyEnabled ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"}

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`;

      await ctx.reply(message, { reply_markup: keyboard });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ settings:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /notify_on
  bot.command("notify_on", async (ctx) => {
    try {
      const telegramId = ctx.from?.id;
      if (!telegramId) return;

      const user = await UserService.getUserByTelegramId(telegramId);
      if (!user) {
        await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        return;
      }

      await UserService.enableNotifications(user.id);
      await ctx.reply("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞.");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ notify_on:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /notify_off
  bot.command("notify_off", async (ctx) => {
    try {
      const telegramId = ctx.from?.id;
      if (!telegramId) return;

      const user = await UserService.getUserByTelegramId(telegramId);
      if (!user) {
        await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        return;
      }

      await UserService.disableNotifications(user.id);
      await ctx.reply("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã! –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ notify_off:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /my_settings
  bot.command("my_settings", async (ctx) => {
    try {
      const telegramId = ctx.from?.id;
      if (!telegramId) return;

      const user = await UserService.getUserByTelegramId(telegramId);
      if (!user) {
        await ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        return;
      }

      const settings = await UserService.getUserSettings(user.id);
      if (!settings) {
        await ctx.reply("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        return;
      }

      const message = `üìã –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

üí± –í–∞–ª—é—Ç–∞: ${settings.currency}
üåê –ò—Å—Ç–æ—á–Ω–∏–∫: ${settings.source}
üìä –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${settings.thresholdPercent}%
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.notifyEnabled ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"}

–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.createdAt?.toLocaleDateString("ru-RU")}
–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${settings.updatedAt?.toLocaleDateString("ru-RU")}`;

      await ctx.reply(message);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ my_settings:", error);
      await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ /help
  bot.command("help", async (ctx) => {
    const helpMessage = `üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/rate - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/notify_on - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/notify_off - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/my_settings - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ—Ä–µ–∑ /settings
3. –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /notify_on
4. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞

üìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: USD, EUR, RUB
üåê –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö: mig.kz

‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;

    await ctx.reply(helpMessage);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
  bot.callbackQuery("settings_currency", async (ctx) => {
    try {
      const keyboard = new InlineKeyboard()
        .text("USD", "set_currency_USD")
        .text("EUR", "set_currency_EUR").row()
        .text("RUB", "set_currency_RUB").row()
        .text("¬´ –ù–∞–∑–∞–¥", "settings");

      await ctx.editMessageText("üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", { reply_markup: keyboard });
      await ctx.answerCallbackQuery();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ callback settings_currency:", error);
      await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    }
  });

  bot.callbackQuery("settings_source", async (ctx) => {
    try {
      const keyboard = new InlineKeyboard()
        .text("mig.kz", "set_source_mig.kz").row()
        .text("¬´ –ù–∞–∑–∞–¥", "settings");

      await ctx.editMessageText("üåê –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:", { reply_markup: keyboard });
      await ctx.answerCallbackQuery();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ callback settings_source:", error);
      await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    }
  });

  bot.callbackQuery("settings_threshold", async (ctx) => {
    try {
      const keyboard = new InlineKeyboard()
        .text("0.5%", "set_threshold_0.5")
        .text("1.0%", "set_threshold_1.0").row()
        .text("2.0%", "set_threshold_2.0")
        .text("5.0%", "set_threshold_5.0").row()
        .text("¬´ –ù–∞–∑–∞–¥", "settings");

      await ctx.editMessageText("üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (%):", { reply_markup: keyboard });
      await ctx.answerCallbackQuery();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ callback settings_threshold:", error);
      await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    }
  });

  bot.callbackQuery("settings_notifications", async (ctx) => {
    try {
      const keyboard = new InlineKeyboard()
        .text("‚úÖ –í–∫–ª—é—á–∏—Ç—å", "notify_on")
        .text("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å", "notify_off").row()
        .text("¬´ –ù–∞–∑–∞–¥", "settings");

      await ctx.editMessageText("üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", { reply_markup: keyboard });
      await ctx.answerCallbackQuery();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ callback settings_notifications:", error);
      await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∞–ª—é—Ç—ã
  bot.callbackQuery(/^set_currency_(.+)$/, async (ctx) => {
    try {
      const currency = ctx.match[1];
      const telegramId = ctx.from?.id;
      
      if (!telegramId) {
        await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      const user = await UserService.getUserByTelegramId(telegramId);
      if (!user) {
        await ctx.answerCallbackQuery("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      await UserService.setCurrency(user.id, currency);
      await ctx.answerCallbackQuery(`‚úÖ –í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${currency}`);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
      const keyboard = new InlineKeyboard()
        .text("üí± –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É", "settings_currency")
        .text("üåê –ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "settings_source").row()
        .text("üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥", "settings_threshold")
        .text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "settings_notifications").row()
        .text("üìã –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "my_settings");

      await ctx.editMessageText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", { reply_markup: keyboard });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ callback set_currency:", error);
      await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  bot.callbackQuery(/^set_source_(.+)$/, async (ctx) => {
    try {
      const source = ctx.match[1];
      const telegramId = ctx.from?.id;
      
      if (!telegramId) {
        await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      const user = await UserService.getUserByTelegramId(telegramId);
      if (!user) {
        await ctx.answerCallbackQuery("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      await UserService.setSource(user.id, source);
      await ctx.answerCallbackQuery(`‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${source}`);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
      const keyboard = new InlineKeyboard()
        .text("üí± –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É", "settings_currency")
        .text("üåê –ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "settings_source").row()
        .text("üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥", "settings_threshold")
        .text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "settings_notifications").row()
        .text("üìã –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "my_settings");

      await ctx.editMessageText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", { reply_markup: keyboard });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ callback set_source:", error);
      await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞
  bot.callbackQuery(/^set_threshold_(.+)$/, async (ctx) => {
    try {
      const threshold = parseFloat(ctx.match[1]);
      const telegramId = ctx.from?.id;
      
      if (!telegramId) {
        await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      const user = await UserService.getUserByTelegramId(telegramId);
      if (!user) {
        await ctx.answerCallbackQuery("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      await UserService.setThreshold(user.id, threshold);
      await ctx.answerCallbackQuery(`‚úÖ –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${threshold}%`);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
      const keyboard = new InlineKeyboard()
        .text("üí± –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É", "settings_currency")
        .text("üåê –ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "settings_source").row()
        .text("üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥", "settings_threshold")
        .text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "settings_notifications").row()
        .text("üìã –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "my_settings");

      await ctx.editMessageText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", { reply_markup: keyboard });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ callback set_threshold:", error);
      await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ callback
  bot.callbackQuery("notify_on", async (ctx) => {
    try {
      const telegramId = ctx.from?.id;
      if (!telegramId) {
        await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      const user = await UserService.getUserByTelegramId(telegramId);
      if (!user) {
        await ctx.answerCallbackQuery("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      await UserService.enableNotifications(user.id);
      await ctx.answerCallbackQuery("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!");
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
      const keyboard = new InlineKeyboard()
        .text("üí± –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É", "settings_currency")
        .text("üåê –ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "settings_source").row()
        .text("üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥", "settings_threshold")
        .text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "settings_notifications").row()
        .text("üìã –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "my_settings");

      await ctx.editMessageText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", { reply_markup: keyboard });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ callback notify_on:", error);
      await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
    }
  });

  bot.callbackQuery("notify_off", async (ctx) => {
    try {
      const telegramId = ctx.from?.id;
      if (!telegramId) {
        await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      const user = await UserService.getUserByTelegramId(telegramId);
      if (!user) {
        await ctx.answerCallbackQuery("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      await UserService.disableNotifications(user.id);
      await ctx.answerCallbackQuery("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!");
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
      const keyboard = new InlineKeyboard()
        .text("üí± –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É", "settings_currency")
        .text("üåê –ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "settings_source").row()
        .text("üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥", "settings_threshold")
        .text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "settings_notifications").row()
        .text("üìã –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "my_settings");

      await ctx.editMessageText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", { reply_markup: keyboard });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ callback notify_off:", error);
      await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
  bot.callbackQuery("settings", async (ctx) => {
    try {
      const telegramId = ctx.from?.id;
      if (!telegramId) return;

      const user = await UserService.getUserByTelegramId(telegramId);
      if (!user) {
        await ctx.answerCallbackQuery("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      const settings = await UserService.getUserSettings(user.id);
      if (!settings) {
        await ctx.answerCallbackQuery("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        return;
      }

      const keyboard = new InlineKeyboard()
        .text("üí± –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É", "settings_currency")
        .text("üåê –ò–∑–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", "settings_source").row()
        .text("üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥", "settings_threshold")
        .text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "settings_notifications").row()
        .text("üìã –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "my_settings");

      const message = `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –í–∞–ª—é—Ç–∞: ${settings.currency}
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: ${settings.source}
‚Ä¢ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${settings.thresholdPercent}%
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.notifyEnabled ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"}

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`;

      await ctx.editMessageText(message, { reply_markup: keyboard });
      await ctx.answerCallbackQuery();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ callback settings:", error);
      await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ callback
  bot.callbackQuery("my_settings", async (ctx) => {
    try {
      const telegramId = ctx.from?.id;
      if (!telegramId) return;

      const user = await UserService.getUserByTelegramId(telegramId);
      if (!user) {
        await ctx.answerCallbackQuery("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }

      const settings = await UserService.getUserSettings(user.id);
      if (!settings) {
        await ctx.answerCallbackQuery("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        return;
      }

      const keyboard = new InlineKeyboard()
        .text("¬´ –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "settings");

      const message = `üìã –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

üí± –í–∞–ª—é—Ç–∞: ${settings.currency}
üåê –ò—Å—Ç–æ—á–Ω–∏–∫: ${settings.source}
üìä –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${settings.thresholdPercent}%
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.notifyEnabled ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"}

–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.createdAt?.toLocaleDateString("ru-RU")}
–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${settings.updatedAt?.toLocaleDateString("ru-RU")}`;

      await ctx.editMessageText(message, { reply_markup: keyboard });
      await ctx.answerCallbackQuery();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ callback my_settings:", error);
      await ctx.answerCallbackQuery("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
  bot.on("callback_query:data", async (ctx) => {
    console.log("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback:", ctx.callbackQuery.data);
    await ctx.answerCallbackQuery();
  });
}
