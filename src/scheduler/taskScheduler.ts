import cron from "node-cron";
import { CurrencyService } from "../services/currencyService.js";
import { NotificationService } from "../services/notificationService.js";
import { UserService } from "../services/userService.js";
import dotenv from "dotenv";

// Load environment variables
dotenv.config({ path: "./config.env" });

export class TaskScheduler {
  private static isInitialized = false;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
   */
  static async initialize(): Promise<void> {
    if (this.isInitialized) {
      console.log("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
      return;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await this.updateCurrencyRates();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∫–∞–∂–¥—ã–π —á–∞—Å
    cron.schedule("0 * * * *", async () => {
      console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...");
      await this.updateCurrencyRates();
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    cron.schedule("*/30 * * * *", async () => {
      console.log("üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...");
      await this.checkNotifications();
    });

    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 9:00
    cron.schedule("0 9 * * *", async () => {
      console.log("üìä –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...");
      await this.sendDailyReports();
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
    cron.schedule("0 10 * * *", async () => {
      console.log("üìà –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É...");
      await this.sendAdminStats();
    });

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫—É—Ä—Å–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π) –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2:00
    cron.schedule("0 2 * * *", async () => {
      console.log("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫—É—Ä—Å–æ–≤...");
      await this.cleanupOldRates();
    });

    this.isInitialized = true;
    console.log("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  private static async updateCurrencyRates(): Promise<void> {
    try {
      const sources = ["mig.kz"];
      const currencies = ["USD"];

      for (const source of sources) {
        for (const currency of currencies) {
          try {
            await CurrencyService.updateCurrencyRates(source);
            console.log(`‚úÖ –ö—É—Ä—Å ${currency} –∏–∑ ${source} –æ–±–Ω–æ–≤–ª–µ–Ω`);
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ ${currency} –∏–∑ ${source}:`, error);
          }
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤:", error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private static async checkNotifications(): Promise<void> {
    try {
      await NotificationService.checkAndSendNotifications();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
   */
  private static async sendDailyReports(): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
      const usersWithNotifications = await CurrencyService.getUsersWithNotifications();
      
      for (const settings of usersWithNotifications) {
        try {
          await NotificationService.sendDailyReport(settings.user.telegramId);
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 100));
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${settings.user.telegramId}:`, error);
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤:", error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
   */
  private static async sendAdminStats(): Promise<void> {
    try {
      // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID)
      const adminId = 123456789; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
      
      await NotificationService.sendAdminStats(adminId);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:", error);
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
   */
  private static async cleanupOldRates(): Promise<void> {
    try {
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

      const currencyRepository = CurrencyService["currencyRepository"];
      const deletedCount = await currencyRepository
        .createQueryBuilder()
        .delete()
        .where("timestamp < :date", { date: thirtyDaysAgo })
        .execute();

      console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${deletedCount.affected || 0} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫—É—Ä—Å–æ–≤`);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π:", error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  static async runImmediateUpdate(): Promise<void> {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤...");
    await this.updateCurrencyRates();
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  static async runImmediateNotificationCheck(): Promise<void> {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...");
    await this.checkNotifications();
  }
}
