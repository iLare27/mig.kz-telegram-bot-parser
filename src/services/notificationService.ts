import { Bot } from "grammy";
import { CurrencyService } from "./currencyService";
import { UserService } from "./userService";
import { UserSettings } from "../entities/UserSettings";

export class NotificationService {
  private static bot: Bot<any>;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  static initialize(bot: Bot<any>): void {
    this.bot = bot;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  static async checkAndSendNotifications(): Promise<void> {
    try {
      const usersWithNotifications = await CurrencyService.getUsersWithNotifications();
      
      for (const settings of usersWithNotifications) {
        await this.checkAndNotifyUser(settings);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  static async checkAndNotifyUser(settings: UserSettings): Promise<void> {
    try {
      const { shouldNotify, change, currentRate } = await CurrencyService.shouldNotifyUser(settings.userId);

      if (shouldNotify) {
        await this.sendRateChangeNotification(settings, change, currentRate);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${settings.userId}:`, error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞
   */
   static async sendRateChangeNotification(
    settings: UserSettings,
    change: number,
    currentRate: any // –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç –∏–ª–∏ —á–∏—Å–ª–æ
  ): Promise<void> {
    try {
      const direction = change > 0 ? "üìà –≤—ã—Ä–æ—Å" : "üìâ —É–ø–∞–ª";
      const changeText = Math.abs(change).toFixed(2);

      const message = `üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞!

–ö—É—Ä—Å ${settings.currency} ${direction} –Ω–∞ ${changeText}% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞.

–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: ${Math.round(currentRate * 100) / 100} ${settings.currency}
–ò—Å—Ç–æ—á–Ω–∏–∫: ${settings.source}

–ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.thresholdPercent}%`;

      await this.bot.api.sendMessage(settings.user.telegramId, message);

      console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${settings.user.telegramId}`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${settings.user.telegramId}:`, error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ –∫—É—Ä—Å–µ
   */
  static async sendDailyReport(userId: number): Promise<void> {
    try {
      const user = await UserService.getUserByTelegramId(userId);
      if (!user) return;

      const settings = await UserService.getUserSettings(user.id);
      if (!settings) return;

      const currentRate = await CurrencyService.getLatestRate(settings.source, settings.currency);
      const yesterdayRate = await CurrencyService.getRateForDate(
        settings.source,
        settings.currency,
        new Date(Date.now() - 24 * 60 * 60 * 1000)
      );

      if (!currentRate) {
        await this.bot.api.sendMessage(userId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã.");
        return;
      }

      let changeText = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è";
      if (yesterdayRate) {
        const change = ((currentRate.value - yesterdayRate.value) / yesterdayRate.value) * 100;
        const direction = change > 0 ? "üìà" : "üìâ";
        changeText = `${direction} ${change.toFixed(2)}%`;
      }

      const message = `üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ –∫—É—Ä—Å–µ ${settings.currency}

–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: ${currentRate.value.toFixed(2)} ${settings.currency}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞: ${changeText}
–ò—Å—Ç–æ—á–Ω–∏–∫: ${settings.source}
–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${currentRate.timestamp.toLocaleString("ru-RU")}`;

      await this.bot.api.sendMessage(userId, message);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  static async sendParsingErrorNotification(userId: number, source: string): Promise<void> {
    try {
      const message = `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!

–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${source}.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –°–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;

      await this.bot.api.sendMessage(userId, message);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
   */
  static async sendAdminStats(adminId: number): Promise<void> {
    try {
      const stats = await UserService.getUserStats();
      
      const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}
üîî –ê–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${stats.activeNotifications}
üí± –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞: ${stats.mostUsedCurrency}
üåê –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: ${stats.mostUsedSource}

–í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}`;

      await this.bot.api.sendMessage(adminId, message);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${adminId}:`, error);
    }
  }
}
